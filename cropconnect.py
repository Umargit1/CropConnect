# -*- coding: utf-8 -*-
"""CropConnect.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XeOEr_Yf4WDdJrtz0T8kJE9VUoe896u-

#Import Libraries
"""

cd /content/drive/MyDrive/Hackathon

!pip install langchain transformers torch torchvision gradio
!pip install torchvision
!pip install gradio
!pip install pillow
!pip install grok

# Commented out IPython magic to ensure Python compatibility.
# %pwd

"""## Environement Variable"""

import os

# Set your keys here (or use Colab’s Secrets manager)
os.environ["GROQ_API_KEY"] = "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"
os.environ["OWM_API_KEY"] = "f405deec8dcfd711e4596069769a4de4"

from transformers import AutoTokenizer, AutoModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("bigscience/bloom-560m")
model = AutoModelForCausalLM.from_pretrained("bigscience/bloom-560m")

def farmer_chatbot(query):
    inputs = tokenizer(query, return_tensors="pt")
    outputs = model.generate(inputs.input_ids, max_length=100)
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response

"""# Crop Health

"""

from transformers import AutoModelForImageClassification, AutoImageProcessor
import torch
from PIL import Image

model_name = "A2H0H0R1/resnet-50-plant-disease"
image_model = AutoModelForImageClassification.from_pretrained(model_name)
processor = AutoImageProcessor.from_pretrained(model_name)
image_model.eval()

# Commented out IPython magic to ensure Python compatibility.
# %pwd

def classify_crop_health(image_path):
    image = Image.open(image_path)
    inputs = processor(images=image, return_tensors="pt")
    with torch.no_grad():
        logits = image_model(**inputs).logits
    predicted_class_idx = logits.argmax(-1).item()
    class_labels = processor.config.id2label
    predicted_class_label = class_labels[predicted_class_idx]
    return predicted_class_label

from PIL import Image
import torch
from transformers import AutoImageProcessor, AutoModelForImageClassification

# Load the processor and model
processor = AutoImageProcessor.from_pretrained("google/vit-base-patch16-224")
model = AutoModelForImageClassification.from_pretrained("google/vit-base-patch16-224")

def classify_crop_health(image_path):
    # Load and preprocess the image
    image = Image.open(image_path).convert("RGB")
    inputs = processor(images=image, return_tensors="pt")

    # Perform inference
    with torch.no_grad():
        outputs = model(**inputs)

    # Get the predicted class index
    predicted_class_idx = outputs.logits.argmax(-1).item()

    # Retrieve the label using the model's configuration
    predicted_label = model.config.id2label[predicted_class_idx]

    return predicted_label





def classify_crop_health(image_path):
    from PIL import Image
    import torch

    # Load the image
    image = Image.open(image_path)

    # Preprocess the image
    inputs = processor(images=image, return_tensors="pt")

    # Perform inference
    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits

    # Get the predicted class index
    predicted_class_idx = logits.argmax(-1).item()

    # Retrieve the label using the model's configuration
    predicted_label = model.config.id2label[predicted_class_idx]

    return predicted_label

from PIL import Image
import torch
from transformers import AutoImageProcessor, AutoModelForImageClassification

# Load the processor and model
processor = AutoImageProcessor.from_pretrained("google/vit-base-patch16-224")
model = AutoModelForImageClassification.from_pretrained("google/vit-base-patch16-224")

def classify_crop_health(image_path):
    image = Image.open(image_path).convert("RGB")
    inputs = processor(images=image, return_tensors="pt")
    with torch.no_grad():
        outputs = model(**inputs)
    predicted_class_idx = outputs.logits.argmax(-1).item()
    predicted_label = model.config.id2label[predicted_class_idx]
    return predicted_label

!pip install requests

print(classify_crop_health('/content/drive/MyDrive/Hackathon/disease.jpg'))

"""# Disease Classification"""

import os
import requests

# 1. Set your API key (you can also export GROK_API_KEY in your environment)
API_KEY = os.getenv("GROK_API_KEY", "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")
API_URL = "https://api.x.ai/v1/completions"

def farmer_chatbot(query, max_tokens=150):
    """
    Sends a user query to Grok and returns the text response.
    """
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "grok-3-beta",
        "messages": [{"role": "user", "content": query}],
        "max_tokens": max_tokens
    }

    resp = requests.post(API_URL, headers=headers, json=payload)
    print(f"[DEBUG] HTTP {resp.status_code} — {resp.text[:200]}...")  # debug first 200 chars

    if resp.status_code == 200:
        return resp.json()["choices"][0]["message"]["content"].strip()
    else:
        return f"Error {resp.status_code}: {resp.text}"

def get_crop_health_advice(disease_name):
    """
    Takes a disease label (from classify_crop_health) and returns
    actionable advice by querying Grok.
    """
    prompt = f"My crop shows signs of {disease_name}. What should I do?"
    advice = farmer_chatbot(prompt)
    print(f"[DEBUG] Advice for '{disease_name}': {advice}")
    return advice

# — Example flow —
if __name__ == "__main__":
    # Suppose this came from your image classifier:
    diagnosed_disease = "late blight"
    print(f"Diagnosed Disease: {diagnosed_disease}")

    # Now get advice:
    suggestion = get_crop_health_advice(diagnosed_disease)
    print(f"Suggested Action: {suggestion}")



"""# Weather"""

import os
import requests

# ————————————————————————————————
# 1. OpenWeatherMap Configuration
# ————————————————————————————————
OWM_API_KEY = "f405deec8dcfd711e4596069769a4de4"
OWM_URL     = "https://api.openweathermap.org/data/2.5/weather"

def get_weather_update(location):
    """
    Fetches current weather for `location` (e.g., "Lahore,PK")
    using OpenWeatherMap and returns a human-readable summary.
    """
    params = {
        "q": location,
        "appid": OWM_API_KEY,
        "units": "metric",  # Celsius
        "lang": "en"
    }
    resp = requests.get(OWM_URL, params=params)
    print(f"[DEBUG] Weather API HTTP {resp.status_code}: {resp.text[:200]}…")

    if resp.status_code != 200:
        return f"Weather fetch error {resp.status_code}: {resp.json().get('message','')}"

    data    = resp.json()
    name    = data["name"]
    country = data["sys"]["country"]
    temp    = data["main"]["temp"]
    cond    = data["weather"][0]["description"]
    humid   = data["main"]["humidity"]
    wind    = data["wind"]["speed"]

    return (
        f"Weather in {name}, {country}:\n"
        f" • Temperature: {temp}°C\n"
        f" • Condition: {cond}\n"
        f" • Humidity: {humid}%\n"
        f" • Wind speed: {wind} m/s"
    )

def get_weather_chat(location):
    """
    Wraps the raw weather info into a Grok-powered advisory.
    """
    weather_info = get_weather_update(location)
    prompt = (
        f"{weather_info}\n\n"
        "As an expert farm advisor, what precautions or actions should the farmer take given this weather?"
    )
    return farmer_chatbot(prompt)

# ————————————————————————————————
# Quick test
# ————————————————————————————————
if __name__ == "__main__":
    loc = "Rawalpindi,PK"
    print("RAW WEATHER INFO:\n", get_weather_update(loc))
    print("\nADVICE:\n", get_weather_chat(loc))

"""# PEST & DISEASE CONTROL"""

from groq import Groq

# ————————————————————————————————
# 1. Initialize Groq client with your key
# ————————————————————————————————
API_KEY = "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"
client = Groq(api_key=API_KEY)

# ————————————————————————————————
# 2. Unified farmer_chatbot using Llama-4 Scout
# ————————————————————————————————
def farmer_chatbot(prompt,
                   model="meta-llama/llama-4-scout-17b-16e-instruct",
                   temperature=1.0,
                   max_completion_tokens=200,
                   top_p=1.0):
    """
    Sends `prompt` to Groq’s Llama-4 Scout model and returns the concatenated streamed response.
    """
    completion = client.chat.completions.create(
        model=model,
        messages=[{"role": "user", "content": prompt}],
        temperature=temperature,
        max_completion_tokens=max_completion_tokens,
        top_p=top_p,
        stream=True,
    )
    text = ""
    for chunk in completion:
        delta = chunk.choices[0].delta.content
        if delta:
            text += delta
    return text.strip()

# ————————————————————————————————
# 3. Pest & Disease Control module
# ————————————————————————————————
def get_pest_disease_advice(pest_or_disease_name):
    prompt = (
        f"I am dealing with {pest_or_disease_name} on my farm. "
        "Please provide practical, low-cost, and environmentally friendly management strategies."
    )
    advice = farmer_chatbot(prompt)
    print(f"[DEBUG] Advice Returned: {advice}")
    return advice

# ————————————————————————
# 4. Quick test
# ————————————————————————
if __name__ == "__main__":
    test_issue = "aphid infestation on tomato plants"
    print(f"Pest/Disease: {test_issue}")
    suggestion = get_pest_disease_advice(test_issue)
    print(f"Suggested Strategies:\n{suggestion}")



"""# Soil Health Suggestion

"""

# ————————————————————————————————
# 1. Soil Health Suggestions module
# ————————————————————————————————
def get_soil_health_suggestions():
    """
    Uses Groq’s Llama-4 Scout to provide best practices
    for improving and maintaining soil health on a farm.
    """
    prompt = (
        "As an expert agronomist, what are the best low-cost, "
        "sustainable practices a farmer can follow to improve and maintain soil health?"
    )
    advice = farmer_chatbot(prompt, max_completion_tokens=250)
    print(f"[DEBUG] Soil Advice Returned: {advice}")
    return advice

# ————————————————————————————————
# 2. Quick test for soil health
# ————————————————————————————————
if __name__ == "__main__":
    print("🔎 Soil Health Best Practices:")
    suggestion = get_soil_health_suggestions()
    print(f"\n{suggestion}")

"""## Market Price Updates and Government Schemes & Subsidies

"""

# ————————————————————————————————
# 1. Market Price Updates module
# ————————————————————————————————
def get_market_price_update(crop_name):
    """
    Uses Groq’s Llama-4 Scout to fetch or estimate
    the current market price for a given crop.
    """
    prompt = (
        f"As a market analyst specializing in agriculture, "
        f"what is the current market price per quintal of {crop_name}? "
        "Provide the answer in PKR and mention the date of the price."
    )
    advice = farmer_chatbot(prompt, max_completion_tokens=150)
    print(f"[DEBUG] Market Price Returned: {advice}")
    return advice

# ————————————————————————————————
# 2. Government Schemes & Subsidies module
# ————————————————————————————————
def get_government_schemes(region="Punjab, Pakistan"):
    """
    Uses Groq’s Llama-4 Scout to list available
    government schemes and subsidies for farmers in the given region.
    """
    prompt = (
        f"As an agricultural policy expert, please list the active "
        f"government schemes and subsidies available to farmers in {region}, "
        "including any eligibility criteria and how to apply."
    )
    advice = farmer_chatbot(prompt, max_completion_tokens=250)
    print(f"[DEBUG] Government Schemes Returned: {advice}")
    return advice

# ————————————————————————————————
# 3. Quick tests for both modules
# ————————————————————————————————
if __name__ == "__main__":
    # Market price test
    crop = "wheat"
    print(f"\n💰 Market Price for {crop.title()}:")
    print(get_market_price_update(crop))

    # Government schemes test
    region = "Punjab, Pakistan"
    print(f"\n🏛️ Government Schemes in {region}:")
    print(get_government_schemes(region))

"""# OUTPUT"""

print(farmer_chatbot("Which crop is best in summer?"))

!pip install groq

!python '/content/drive/MyDrive/Hackathon/farmer_bot.py'

def get_crop_health_advice(image_path):
    disease = classify_crop_health(image_path)
    print("Model predicted disease/condition:", disease)
    prompt = f"My crop shows signs of {disease}. What should I do?"
    return farmer_chatbot(prompt)